minispade.register('ember-autosuggest/autosuggest', "(function() {var get = Ember.get,\n    set = Ember.set,\n    setEach = Ember.setEach,\n    addObserver = Ember.addObserver,\n    removeObserver = Ember.removeObserver;\n\nwindow.AutoSuggestComponent = Ember.Component.extend({\n  actions: {\n    addSelection: function(selection){\n      set(this, 'query', '');\n      get(this, 'destination').addObject(selection);\n      set(this, 'selectionIndex', -1);\n    },\n\n    moveSelection: function(direction){\n      var selectionIndex = get(this, 'selectionIndex'),\n          isUp = direction === 'up',\n          isDown = !isUp,\n          displayResults = get(this, 'displayResults'),\n          displayResultsLength = get(displayResults, 'length'),\n          searchPath = get(this, 'searchPath'),\n          hoverEl;\n\n      displayResults.setEach('active', false); \n\n      if(!displayResultsLength){\n        set(this, 'selectionIndex', -1);\n        return;\n      }\n\n      hoverEl = this.$('li.result.hover');\n\n      if(hoverEl.length){\n        var text = Ember.$('span', hoverEl).text(),\n            selected = displayResults.find(function(item){\n                          return get(item, searchPath) === text;\n                       });\n\n        selectionIndex = displayResults.indexOf(selected);\n\n        this.$('ul.suggestions li').removeClass('hover');\n\n        this.$('input.autosuggest').focus();\n      }\n\n      if(isUp && selectionIndex <= 0){\n        selectionIndex =  0;\n      }\n      else if(isDown && selectionIndex === displayResultsLength -1){\n        selectionIndex = displayResultsLength -1;\n      }else if(isDown){\n        selectionIndex++;\n      }else{\n        selectionIndex--;\n      }\n\n      var active = get(this, 'displayResults').objectAt(selectionIndex);\n\n      set(this, 'selectionIndex', selectionIndex);\n\n      set(active, 'active', true);\n    },\n\n    hideResults: function(){\n      var displayResults = get(this, 'displayResults');\n\n      set(this, 'selectionIndex', -1);\n\n      if(!get(displayResults, 'length')){\n        this.$('.no-results').addClass('hdn');\n        return;\n      }\n\n      this.$('.results').addClass('hdn');\n    },\n\n    selectActive: function(){\n      var selectionIndex = get(this, 'selectionIndex'),\n          displayResultsLength = get(this, 'displayResults.length');\n\n      if(!displayResultsLength){\n        return;\n      }\n\n      var active = get(this, 'displayResults').find(function(item){\n        return get(item, 'active');\n      });\n\n      if(!active){\n        return;\n      }\n\n      this.send('addSelection', active);\n    },\n\n    removeSelection: function(item){\n      get(this, 'destination').removeObject(item);\n    },\n  },\n\n  classNameBindings: [':autosuggest'],\n  minChars: 1,\n  searchPath: 'name',\n  query: null,\n  selectionIndex: -1,\n\n  init: function(){\n    this._super.apply(this, arguments);\n    addObserver(this, 'query', this.queryDidChange);\n    set(this, 'displayResults', Ember.A());\n  },\n\n  didInsertElement: function(){\n    Ember.assert('You must supply a source for the autosuggest component', get(this, 'source'));\n    Ember.assert('You must supply a destination for the autosuggest component', get(this, 'destination'));\n\n    this.$('ul.suggestions').on('mouseover', 'li', this.mouseOver.bind(this));\n    this.$('ul.suggestions').on('mouseout', 'li', this.mouseOut.bind(this));\n  },\n\n  _queryPromise: function(query){\n    var source = get(this, 'source'),\n        searchPath = get(this, 'searchPath'),\n        store = get(this, 'store');\n\n    return Ember.RSVP.Promise(function(resolve, reject){\n      if(('undefined' !== typeof DS) && (DS.Model.detect(source))){\n        var queryExpression = {};\n\n        queryExpression[searchPath] = query;\n\n        var type = source.toString().humanize();\n\n        store.find(type, queryExpression).then(resolve, reject);\n      }\n      else if(source.then){\n        source.then(resolve, reject);\n      }else{\n        resolve(source);\n      }\n    });\n  },\n\n  queryDidChange: function(){\n    var query = get(this, 'query'),\n        displayResults = get(this, 'displayResults'),\n        hasQuery = get(this, 'hasQuery'),\n        self = this;\n\n    if(!hasQuery){\n      set(this, 'selectionIndex', -1);\n      displayResults.clear();\n      return;\n    }\n\n    this._queryPromise(query).then(function(results){\n      self.processResults(query, results);\n    },\n    function(e){\n      console.log(e.message);\n      console.log(e.stack);\n      throw e;\n    });\n  },\n\n  processResults: function(query, source){\n    var self = this,\n        displayResults = get(this, 'displayResults');\n\n    this.positionResults();\n\n    var results = source.filter(function(item){\n      return item.get(get(self, 'searchPath')).toLowerCase().search(query.toLowerCase()) !== -1;\n    }).filter(function(item){\n      return !get(self, 'destination').contains(item);\n    });\n\n    if(get(results, 'length') === 0){\n      return displayResults.clear();\n    }\n\n    var searchPath = get(this, 'searchPath');\n\n    displayResults.clear();\n\n    displayResults.pushObjects(Ember.A(results.sort(function(a, b){\n      return Ember.compare(get(a, searchPath), get(b, searchPath));\n    })));\n  },\n\n  hasQuery: Ember.computed(function(){\n    var query = get(this, 'query');\n\n    if(query && query.length > get(this, 'minChars')){\n      this.positionResults();\n      return true;\n    }\n\n    return false;\n  }).property('query'),\n\n  mouseOver: function(evt){\n    var el = this.$(evt.target);\n\n    var active = get(this, 'displayResults').filter(function(item){\n                   return get(item, 'active');\n                 });\n\n    if(active || active.length){\n      active.setEach('active', false);\n      set(this, 'selectionIndex', -1);\n    }\n\n    if(el.hasClass('result-name')){\n      return;\n    }\n\n    this.$('ul.suggestions li').removeClass('hover');\n    el.addClass('hover');\n  },\n\n  mouseOut: function(evt){\n    var target = $(evt.target);\n\n    if(target.parents('ul').hasClass('suggestions')){\n      return;\n    }\n\n    this.$('ul.suggestions li').removeClass('hover');\n  },\n\n  positionResults: function(){\n    var results = this.$('.results');\n\n    var input = this.$('input.autosuggest'),\n        suggestions = this.$('ul.suggestions'),\n        selections = this.$('ul.selections'),\n        position = input.position();\n\n    results.removeClass('hdn');\n\n    suggestions.css('position', 'absolute');\n    suggestions.css('left', position.left);\n    suggestions.css('top', position.top + input.height() + 7);\n\n    var width = this.$('ul.selections').outerWidth() - position.left;\n\n    suggestions.css('width', width);\n  },\n\n  autosuggest: Ember.TextField.extend({\n    KEY_DOWN: 40,\n    KEY_UP: 38,\n    COMMA: 188,\n    TAB: 9,\n    ENTER: 13,\n    ESCAPE: 27,\n\n    init: function(){\n      this._super.apply(this, arguments);\n\n      var allowedKeyCodes = Ember.A([this.KEY_UP, this.KEY_DOWN, this.COMMA, this.TAB, this.ENTER, this.ESCAPE]);\n      this.set('allowedKeyCodes', allowedKeyCodes);\n    },\n\n    keyDown: function(e){\n      var keyCode = e.keyCode;\n\n      if(!this.get('allowedKeyCodes').contains(keyCode)){\n        return;\n      }\n\n      var controller = get(this, 'controller');\n\n      switch(keyCode){\n        case this.KEY_UP:\n          this.sendAction('moveSelection', 'up');\n          break;\n        case this.KEY_DOWN:\n          this.sendAction('moveSelection', 'down');\n          break;\n        case this.ENTER:\n          controller.sendAction('selectActive');\n          break;\n        case this.ESCAPE:\n          this.sendAction('hideResults');\n          break;\n        default:\n          console.log(keyCode);\n      }\n    },\n  }),\n\n  _yield: function(context, options) {\n    var get = Ember.get, \n    view = options.data.view,\n    parentView = this._parentView,\n    template = get(this, 'template');\n\n    if (template) {\n      Ember.assert(\"A Component must have a parent view in order to yield.\", parentView);      \n      view.appendChild(Ember.View, {\n        isVirtual: true,\n        tagName: '',\n        _contextView: parentView,\n        template: template,\n        context: get(view, 'context'), // the default is get(parentView, 'context'),\n        controller: get(view, 'controller'), // the default is get(parentView, 'context'),\n        templateData: { keywords: parentView.cloneKeywords() }\n      });\n    }\n  },\n});\n\n})();\n//@ sourceURL=ember-autosuggest/autosuggest");